[project]
name = "python-uv-template"
version = "0.1.0"
description = "A modern Python project template using uv with comprehensive code quality tools"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["python", "template", "uv", "code-quality", "testing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]
requires-python = ">=3.10,<3.13"
dependencies = [
    "pymupdf>=1.23.0",
    # LangChain core + community splitters/loaders/vectorstores
    "langchain>=0.2.0",
    "langchain-core>=0.2.0",
    "langchain-community>=0.2.0",
    "langchain-text-splitters>=0.2.0",
    # LangGraph (StateGraph, START, etc.)
    "langgraph>=0.2.0",
    # Embeddings (HuggingFace)
    "langchain-huggingface>=0.1.0",
    "sentence-transformers>=2.2.2",
    "transformers>=4.44.0",
    "torch>=2.1.0",
    # OpenAI chat model via LangChain
    "langchain-openai>=0.2.0",
    "openai>=1.40.0",
    # WebBaseLoader deps
    "beautifulsoup4>=4.12.3",
    "requests>=2.32.0",
    "html5lib>=1.1",
    # Hub (para hub.pull)
    "langchainhub>=0.1.21",
    # Tipos (lo usas en imports)
    "typing-extensions>=4.12.2",
    # (Opcional) Mantengo tus paquetes de LlamaIndex por compatibilidad con cÃ³digo previo
    "llama-index>=0.10.0",
    "llama-index-embeddings-huggingface>=0.2.0",
    "chromadb>=1.1.1",
    "python-dotenv>=1.1.1",
    "Deprecated>=1.2.14",
    "langchain-chroma>=0.2.6",
]

[project.scripts]
main = "python_uv_template.main:main"
main_langchain = "python_uv_template.main_langchain:main"
ingest_index = "python_uv_template.ingest_index:main"
qa_pipeline = "python_uv_template.qa_pipeline:main"


[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.0",
    "ruff>=0.12.9",
    "black>=24.0.0",
    "isort>=5.13.0",
    "bandit>=1.7.0",
    "safety>=3.0.0",
    "pip-audit>=2.6.0",
    "pre-commit>=4.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 88

[tool.uv]
index-url = "https://pypi.org/simple"


[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Use of assert detected

# Black configuration
[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["python_uv_template"]

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", ".venv"]
skips = ["B101", "B601"]
